
抽象工厂模式(Abstract Factory Pattern)：
	提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
	抽象工厂模式又称为Kit模式，它是一种对象创建型模式。
	
局限性 ：在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦
（新开一个工厂容易，在工厂中新增加一个产品很难）开闭原则的倾斜性
	
概念-	产品等级等级结构		产品族	

		产
		品
		等
		级
		^
	f4	|  	f4a			f4b
	f3	|   f3a			f3b
	f2	|   f2a			f2b
	f1	|  	f1a			f1b
		+-----------------------> 产品族
			电视			冰箱
			
f1a,f1b构成一个产品族，
f1a,f2a,f3a,f4a构成一个产品等级			


抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。
抽象工厂模式与工厂方法模式最大的区别在于
工厂方法模式针对的是一个产品等级结构
而抽象工厂模式需要面对多个产品等级结构
一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。

当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时
抽象工厂模式比工厂方法模式更为简单、更有效率。
	
	
示例

	要建立一组风格不同的视图组件
	如蓝色，绿色等等不同颜色的组件
    3. 适用场景
       在以下情况下可以考虑使用抽象工厂模式：
       
        (1) 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，用户无须关心对象的创建过程，将对象的创建和使用解耦。
       
        (2) 系统中有多于一个的产品族，而每次只使用其中某一产品族。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。
        
       √(3) 属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。同一个产品族中的产品可以是没有任何关系的对象，但是它们都具有一些共同的约束，如同一操作系统下的按钮和文本框，按钮与文本框之间没有直接关系，但它们都是属于某一操作系统的，此时具有一个共同的约束条件：操作系统的类型。
       
       √(4) 产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。
       
(3) 属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。
同一个产品族中的产品可以是没有任何关系的对象，
但是它们都具有一些共同的约束，
如同一操作系统下的按钮和文本框，按钮与文本框之间没有直接关系，
但它们都是属于某一操作系统的，此时具有一个共同的约束条件：
操作系统的类型。






	