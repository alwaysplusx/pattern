(2)不纯的职责链模式
      在一个不纯的职责链模式中允许某个请求被一个具体处理者部分处理后再向下传递，
      或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，
      而且一个请求可以最终不被任何处理者对象所接收。
      
  Java AWT 1.0中的事件处理模型应用的是不纯的职责链模式，
     其基本原理如下：由于窗口组件（如按钮、文本框等）一般都位于容器组件中，
     因此当事件发生在某一个组件上时，先通过组件对象的handleEvent()方法将事件传递给相应的事件处理方法，
     该事件处理方法将处理此事件，然后决定是否将该事件向上一级容器组件传播；
     上级容器组件在接到事件之后可以继续处理此事件并决定是否继续向上级容器组件传播，
     如此反复，直到事件到达顶层容器组件为止；
     如果一直传到最顶层容器仍没有处理方法，则该事件不予处理。
     每一级组件在接收到事件时，都可以处理此事件，而不论此事件是否在上一级已得到处理，还存在事件未被处理的情况。
     显然，这就是不纯的职责链模式，早期的Java AWT事件模型(JDK 1.0及更早)中的这种事件处理机制又叫事件浮升(Event Bubbling)机制。
     从Java.1.1以后，JDK使用观察者模式代替职责链模式来处理事件。
     目前，在JavaScript中仍然可以使用这种事件浮升机制来进行事件处理。